"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[43737],{43737:(u,l,t)=>{t.r(l),t.d(l,{WritingTranslationsComponent:()=>f});var s=t(71567),d=t(58567),a=t(84142),e=t(65879);let f=(()=>{class o{constructor(){this.fromToCode="'{'{from}'}'-'{'{to}'}'",this.fromToCodeTranslation="{0-12}",this.jsonExample={language:"json",code:'{\n  "platformUploadCollection.folderNamePluralization": "{folderCount, plural, =1 {1 folder} other {# folders}}",\n  "platformUploadCollection.fileNamePluralization": "{filesCount, plural, =1 {1 file} other {# files}}",\n  "platformUploadCollection.removeBtnLabel": "Remove",\n  "platformUploadCollection.messageUpdateVersionSuccess": "{folderName} version has been updated.",\n  "platformUploadCollection.messageRemoveFoldersAndFilesFailed": "Failed to remove {@@platformUploadCollection.folderNamePluralization} and {@@platformUploadCollection.fileNamePluralization} files."\n}'},this.jsExample={language:"js",code:"const folderNamePluralization = ({folderCount}) => {\n    return folderCount === 1 ? '1 folder' : `${folderCount} folders`;\n};\n\nconst fileNamePluralization = ({filesCount}) => {\n    return filesCount === 1 ? '1 file' : `${filesCount} files`;\n};\n\nconst platformUploadCollection = {\n    folderNamePluralization,\n    fileNamePluralization,\n    removeBtnLabel: 'Remove',\n    messageUpdateVersionSuccess: ({folderName}) => `${folderName} version has been updated.`,\n    messageRemoveFoldersAndFilesFailed: ({folderName, fileName}) => {\n        const folders = folderNamePluralization({folderName});\n        const files = fileNamePluralization({fileName});\n        return `Failed to remove ${folders} and ${files} files.`;\n    }\n};"}}}return o.\u0275fac=function(n){return new(n||o)},o.\u0275cmp=e.Xpm({type:o,selectors:[["ng-component"]],standalone:!0,features:[e.jDz],decls:80,vars:8,consts:[["routerLink","/platform/upload-collection/i18n","fd-link",""],[3,"file"],["href","https://support.crowdin.com/icu-message-syntax","fd-link","","target","_blank"],["href","https://formatjs.io/docs/core-concepts/icu-syntax/","fd-link","","target","_blank"],["href","https://formatjs.io/","fd-link","","target","_blank"],["id","internal-references","componentName","i18n"],["id","escaping-curly-braces"]],template:function(n,i){1&n&&(e.TgZ(0,"header"),e._uU(1,"Writing translations"),e.qZA(),e.TgZ(2,"description")(3,"p"),e._uU(4," Translations consist of two parts: the translation identifier and the translation itself. The translation identifier is a string that is used to identify the translation. The translation itself is the string that is displayed to the user. "),e.qZA(),e.TgZ(5,"p"),e._uU(6," The format in which the translation is written depends on the type of the loader. If you are loading translations from a JavaScript object, then it can be a function too, along with a string. "),e.qZA(),e.TgZ(7,"p"),e._uU(8," Let's take example from Platform Upload collection translation identifiers. They have a prefix "),e.TgZ(9,"code"),e._uU(10,"platformUploadCollection"),e.qZA(),e._uU(11,". Whole list of the identifiers can be found in the "),e.TgZ(12,"a",0),e._uU(13,"upload collection i18n documentation page"),e.qZA(),e._uU(14,". For the sake of the example, let's take a small list of them from English translations file: "),e.qZA(),e._UZ(15,"fd-code-snippet",1),e.TgZ(16,"p"),e._uU(17," Here, in the list above, we see 4 translation variants: a simple string, a string with a placeholder, with internal references and "),e.TgZ(18,"a",2),e._uU(19,"ICU expression"),e.qZA()(),e.TgZ(20,"p"),e._uU(21," If you'd loaded translation strings using the JavaScript object, you'd have access to functions as well and above example would take the following form: "),e.qZA(),e._UZ(22,"fd-code-snippet",1),e.TgZ(23,"p"),e._uU(24," The JavaScript object is a valid translation source, but it is not the most convenient one if you want to translate your application using a translation service. For that, you need to use format, which is represented by the raw strings in the example above. The format is called "),e.TgZ(25,"a",3),e._uU(26,"ICU Message Syntax"),e.qZA(),e._uU(27,", and it is a standard for the translation strings. It is supported by most of the translation services, and it is the recommended format for the translations. "),e.qZA(),e.TgZ(28,"p"),e._uU(29," Our translation interpolations are using "),e.TgZ(30,"a",4),e._uU(31,"formatjs"),e.qZA(),e._uU(32," library, which is the most popular ICU Message Syntax implementation for JavaScript. "),e.qZA()(),e.TgZ(33,"fd-docs-section-title",5),e._uU(34," How does internal references work?\n"),e.qZA(),e.TgZ(35,"description")(36,"p"),e._uU(37," Internal references are used to reference other translations. When our translations resolver finds a reference, it tries to find the translation for the reference and replace the reference with the translation, if it is found. Then it assembles one big ICU Message Syntax string and passes it to the formatjs library for the interpolation. One thing to note is that if referenced translation needs some context, then the context is also needed for the referee translation. For example, if we have a translation "),e.TgZ(38,"code"),e._uU(39,"platformUploadCollection.folderNamePluralization"),e.qZA(),e._uU(40," and it is referenced in another translation "),e.TgZ(41,"code"),e._uU(42,"platformUploadCollection.messageRemoveFoldersAndFilesFailed"),e.qZA(),e._uU(43," , then the "),e.TgZ(44,"code"),e._uU(45,"platformUploadCollection.messageRemoveFoldersAndFilesFailed"),e.qZA(),e._uU(46," translation needs to have minimum the same context as the "),e.TgZ(47,"code"),e._uU(48,"platformUploadCollection.folderNamePluralization"),e.qZA(),e._uU(49," translation, otherwise the interpolation will fail. "),e.qZA()(),e.TgZ(50,"fd-docs-section-title",6),e._uU(51," How to escape "),e.TgZ(52,"code"),e._uU(53),e.qZA(),e._uU(54," and "),e.TgZ(55,"code"),e._uU(56),e.qZA(),e._uU(57," characters?\n"),e.qZA(),e.TgZ(58,"description")(59,"p"),e._uU(60," If you need to use "),e.TgZ(61,"code"),e._uU(62),e.qZA(),e._uU(63," or "),e.TgZ(64,"code"),e._uU(65),e.qZA(),e._uU(66," characters in your translation, you need to wrap them in single or double quotes. "),e.qZA(),e.TgZ(67,"p"),e._uU(68," For example, if your translation needs to be "),e.TgZ(69,"code"),e._uU(70),e.qZA(),e._uU(71," and your contexts are "),e.TgZ(72,"code"),e._uU(73,"from"),e.qZA(),e._uU(74," and "),e.TgZ(75,"code"),e._uU(76,"to"),e.qZA(),e._uU(77,", then your translation will look like this: "),e.TgZ(78,"code"),e._uU(79),e.qZA()()()),2&n&&(e.xp6(15),e.Q6J("file",i.jsonExample),e.xp6(7),e.Q6J("file",i.jsExample),e.xp6(31),e.Oqu("{"),e.xp6(3),e.Oqu("}"),e.xp6(6),e.Oqu("{"),e.xp6(3),e.Oqu("}"),e.xp6(5),e.Oqu(i.fromToCodeTranslation),e.xp6(9),e.Oqu(i.fromToCode))},dependencies:[a.Gt,a.we,s.rH,d.N0,a.ND,a.kZ],encapsulation:2}),o})()}}]);