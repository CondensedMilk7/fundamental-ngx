"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[99186],{99186:(d,l,n)=>{n.r(l),n.d(l,{ScrollSpyHeaderComponent:()=>s});var o=n(84142),e=n(65879);let s=(()=>{class t{}return t.\u0275fac=function(a){return new(a||t)},t.\u0275cmp=e.Xpm({type:t,selectors:[["app-scroll-spy-header"]],standalone:!0,features:[e.jDz],decls:13,vars:0,consts:[["module","ScrollSpyModule","subPackage","scroll-spy"]],template:function(a,c){1&a&&(e.TgZ(0,"fd-doc-page")(1,"header"),e._uU(2,"Scroll Spy"),e.qZA(),e.TgZ(3,"description"),e._uU(4," Scroll Spy is a tool "),e.TgZ(5,"strong"),e._uU(6,"directive"),e.qZA(),e._uU(7," designed to help navigation elements determine the element currently in view of the user. It takes in an array of tags to track, and when one of those tags goes over the top scroll limit, an event is fired. "),e._UZ(8,"br")(9,"br"),e._uU(10," The examples below make use of the id to determine what element is spied on, but many other approaches are also possible. "),e.qZA(),e._UZ(11,"import",0)(12,"fd-header-tabs"),e.qZA())},dependencies:[o.iD,o.Gt,o.we,o.kC,o.c1]}),t})()}}]);